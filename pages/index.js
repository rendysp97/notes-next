import Head from "next/head";

import {
  Card,
  CardHeader,
  CardBody,
  CardFooter,
  SimpleGrid,
  Heading,
  Text,
  FormLabel,
  IconButton,
  Input,
  Button,
} from "@chakra-ui/react";
import { DeleteIcon, EditIcon, HamburgerIcon } from "@chakra-ui/icons";
import { useState, useEffect } from "react";

import { useRouter } from "next/router";

import ModalLayout from "@/layout/modal_layout";

export default function Home({ data }) {
  const [isAddOpen, setAddOpen] = useState(false);
  const [isDeleteOpen, setDeleteOpen] = useState(false);
  const [isEditOpen, setEditOpen] = useState(false);

  const [input, setInput] = useState({
    title: "",
    description: "",
  });

  const [inputEdit, setInputEdit] = useState();
  const [deletedId,setDeletedId] = useState()
  const router = useRouter();

  const handleInput = (event) => {
    let { value, name } = event.target;

    console.log(value);

    setInput((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddOpen = () => {
    setAddOpen(true);
  };

  const handleDeleteOpen = (id) => {
    setDeletedId(id)
    setDeleteOpen(true);
  };

  const handleEditOpen = (item) => {
    setInputEdit(item);

    setInput({ title: item?.title, description: item?.description });

    setEditOpen(true);
  };

  const handleClose = () => {
    setAddOpen(false);
    setDeleteOpen(false);
    setEditOpen(false);
    setInputEdit(null);
  };

  const handleAdd = async () => {
    const response = await fetch("https://service.pace-unv.cloud/api/notes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        title: input.title,
        description: input.description,
      }),
    });

    const result = await response.json();

    if (result.success) {
      router.reload();
    }
  };

  const handleDelete = async () => {
    const resp = await fetch(
      `https://service.pace-unv.cloud/api/notes/delete/${deletedId}`,
      {
        method: "DELETE",
      }
    );

    const result = await resp.json();

    if (result.success) {
      router.reload();
    }
  };

  const handleEdit = async (id) => {
    const resp = await fetch(
      `https://service.pace-unv.cloud/api/notes/update/${inputEdit.id}`,
      {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: input.title,
          description: input.description,
        }),
      }
    );

    const result = await resp.json();

    if (result.success) {
      router.reload();
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Button
        colorScheme="teal"
        size="lg"
        width={"50%"}
        margin={10}
        textAlign={"center"}
        display="block"
        mx="auto"
        borderRadius={20}
        onClick={() => handleAddOpen()}
      >
        Add Notes
      </Button>
      <SimpleGrid columns={2} spacing={5} padding={30}>
        {data.data.map((item) => (
          <Card borderRadius={20} key={item.id} boxShadow={"md"}>
            <CardHeader>
              <Heading
                size="md"
                textAlign={"justify"}
                fontFamily={"sans-serif"}
                fontSize={25}
              >
                {item.title}
              </Heading>
            </CardHeader>
            <CardBody fontSize={20} fontFamily={"sans-serif"}>
              <Text>{item.description}</Text>
            </CardBody>
            <CardFooter>
              <IconButton
                icon={<EditIcon />}
                size="20px"
                onClick={() => handleEditOpen(item)}
                marginRight={10}
              />
              <IconButton
                icon={<DeleteIcon />}
                size="20px"
                onClick={() => handleDeleteOpen(item.id)}
              />

              <ModalLayout
                isOpen={isAddOpen}
                onClose={handleClose}
                actionType="add"
                handleAdd={handleAdd}
              >
                <FormLabel>Title</FormLabel>
                <Input
                  type="text"
                  value={input.title}
                  onChange={handleInput}
                  name="title"
                  id="title"
                />
                <FormLabel marginTop={5}>Description</FormLabel>
                <Input
                  type="text"
                  value={input.description}
                  onChange={handleInput}
                  name="description"
                  id="description"
                />
              </ModalLayout>

              <ModalLayout
                isOpen={isDeleteOpen}
                onClose={handleClose}
                actionType="delete"
                handleDelete={() => handleDelete(item.id)}
              />

              <ModalLayout
                isOpen={isEditOpen}
                onClose={handleClose}
                actionType="edit"
                handleEdit={() => handleEdit()}
              >
                <FormLabel>Title</FormLabel>
                <Input
                  type="text"
                  onChange={handleInput}
                  name="title"
                  id="title"
                  value={input.title}
                />
                <FormLabel marginTop={5}>Description</FormLabel>
                <Input
                  type="text"
                  onChange={handleInput}
                  name="description"
                  id="description"
                  value={input.description}
                />
              </ModalLayout>
            </CardFooter>
          </Card>
        ))}
      </SimpleGrid>
    </>
  );
}

export async function getStaticProps() {
  const response = await fetch("https://service.pace-unv.cloud/api/notes");
  const data = await response.json();

  console.log(data);

  return {
    props: {
      data,
    },
    revalidate: 5,
  };
}
